				 README
OPTIONS
For a list of all of the options see the usage generated by the tool.  this
can be gotten by invoking it with no arguments, or giving the -h or --help
flag.

--well_known | -w <well-known name>
The well-known name flag is required when running the Code generation tool.
A well-known name is typically done in reverse url form (similar to the 
interface name).  For example AllJoyn has the url www.alljoyn.org. An 
interface developed by the AllJoyn team would most likely use the well-known 
name org.alljoyn. If the bus name is part of a collection of interfaces for a 
specific task, for example text editing, the well-known name could be 
org.alljoyn.textedit.

    Valid Well-known names
    - A well-known name must not exceed the maximum name length of 255 
      characters.	
    - A well-known name must contain 2 or more elements separated by a period 
      <element>.<element>[.<element>]+
	    - Each element must contain the ASCII characters [A-Z][a-z][0-9]_-.
	    - Each element must have at lease one character.
        - An element must not begin with a digit (0-9).
				 
GENERATED FILES
The Code generation tool takes in a formal XML definition of a service and
generates C++ output. the output files fall into two categories.  Those that
are not expected to be modified by the developer, and the skeleton files where
the developer needs to add code.  In the list below the files that REQUIRE the
developer to modify them are preceded by **.

<object_name>ServiceMain.cc

  A sample file that contains calls to attach the application to the bus, and
  expose the service object.  This is a sample file as it is possible that one
  application may wish to support multiple service objects.

<object_name>Service.h

  The header file that defines all of the methods that are used by the service
  object. This includes the "boilerplate" methods as well as the methods that
  the developer will actually have to provide implementations for.  It also
  includes any type definitions for compound types that are part of the
  interface definitions.

<object_name>Service.cc

  The file that contains the service object "boilerplate" code that implements
  all of the service functionality that should not need to be modified by the
  developer.  This includes building and sending the messages that correspond
  to the various methods and signals that comprise the service object.

** <object_name>ServiceMethods.cc

  Skeleton code for the methods that the developer needs to implement.  The
  methods in here will reflect the XML descriptions from the input file(s). In
  runnable mode (--runnable), example methods of a default implementation will be generated. 
  This will generate code that will return a default value for each type of argument
  as well as printing out that it has been called. The last method handler will 
  trigger any of the signals in this object to be sent.

<object_name>ClientMain.cc

  Sample file that contains calls to attach the application to the bus.  This
  is a sample file to help the application writer understand what needs to be
  done in order to interact with the service objects on the bus. In runnable
  mode (--runnable), this file will call all of the methods defined in
  each interface using default values as well as Getting and Setting values for
  each property.

<object_name>Client.h

  The header file that defines all of the methods that are used by the client
  to interact with the service object.

<object_name>Client.cc

  Client "boilerplate" code that implements the required client functionality
  that should not need to be modified by the developer.  This is mainly the
  code that wraps the marshaling and un-marshaling of the messages, as well as
  the bus interaction for methods, signals and properties.

** <object_name>ClientHandlers.cc

  Skeleton code for the signal handling that the developer needs to implement.
  Depending on the presence of asynchronous method(s) there may also be
  handlers for method replies. In runnable mode (--runnable), there will be a
  default implementation which consists of printing a message indicating it
  received the signal.

BusAttachmentMgr.h

  Header file for the bus attachment manager. This file is where the Session Port
  is defined. This file only needs to be modified if the developer wishes to use
  a specific session port. Otherwise, a default session port of 42 will be used.

BusAttachmentMgr.cc

  The bus attachment manager: a class that simplifies the interaction with the
  bus. This file should not need to be modified.

** makefile

  A sample makefile that requires the AllJoyn installation path added to
  compile and link the generated code. The makefile will create an executable
  for each of the main files that is generated.  If the tool was invoked using the
  runnable flag (--runnable), default code will have been generated in both the
  Service and Client.  Running this default code with no modification will enable the
  developer to ensure that the plumbing is working.

TESTING
  Please refer to the README in the test directory to learn how to use the test
  script.
  
  
  Copyright © 2010-2011 Qualcomm Innovation Center, Inc.
  This document is licensed under the Creative Commons Attribution-ShareAlike 
  3.0 Unported License (the "CC BY-SA License"); provided,
  that (i) any source code incorporated in this documentation is licensed
           under the Apache License version 2.0
  and (ii) THIS DOCUMENTATION AND ALL INFORMATION CONTAINED HEREIN ARE
           PROVIDED ON AN "AS-IS" BASIS WITHOUT WARRANTY OF ANY KIND.

  To view a copy of this license, visit

     http://creativecommons.org/licenses/by-sa/3.0/

  or send a letter to

     Creative Commons
     171 Second Street, Suite 300
     San Francisco
     California, 94105, USA